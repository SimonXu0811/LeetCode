思路
动态规划，将之前的所有数的积和后一个相乘，记录最大值和最小值
因为最小值乘负数可能会成为最大值
然后与之前的最大值比较，如果大的话，就保存现在的最大最小值
如果不大的话，那么继续

代码
class Solution {
   public int maxProduct(int[] A) {
    if (A.length == 0) {
        return 0;
    }
    
    int maxpre = A[0];//初始化
    int minpre = A[0];
    int res = A[0];
    int max, min;
    
    for (int i = 1; i < A.length; i++) {
        max = Math.max(Math.max(maxpre * A[i], minpre * A[i]), A[i]);//找到连续的最大值
        min = Math.min(Math.min(maxpre * A[i], minpre * A[i]), A[i]);//找到连续的最小值
        res = Math.max(max, res);//保存最大的那个
        maxpre = max;//记录以便继续比较
        minpre = min;
    }
    return res;
   }
}

时间复杂度分析
遍历了一次数组，所以时间复杂度为:O(n)

空间复杂度分析
常数级的空间，所以空间复杂度为:O(1)
