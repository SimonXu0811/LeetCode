自己的思路
用两个stack做，一个正常的push进去，形成后进先出
然后另一个stack push的是第一个stack的pop，这样就形成了先进先出
然后就形成了queue

自己的代码
class MyQueue {
    Stack<Integer> stack1;
    Stack<Integer> stack2;
    /** Initialize your data structure here. */
    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        stack1.push(x);//stack1正常的push
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
       if(stack2.isEmpty()){//如果为空，就是还没有复制进去，那么就复制stack1的值
           while(!stack1.isEmpty()){
               stack2.push(stack1.pop());
           }
       }
        return stack2.pop();最后pop掉
    }
    
    /** Get the front element. */
    public int peek() {
        if(stack2.isEmpty()){//如果为空，那么就复制进去
           while(!stack1.isEmpty()){
               stack2.push(stack1.pop());
           }
       }
        return stack2.peek();//最后获取顶端的值
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(stack2.isEmpty()){//为空就是还没复制stack1
           while(!stack1.isEmpty()){
               stack2.push(stack1.pop());
           }
       }
        return stack2.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
 
 时间复杂度
 push pop Empty必定有一个需要复制stack1的值，其他的两个就可以以复杂度为O(1)的情况下查询了
 那么时间复杂度为:O(n)
 
 空间复杂度
 用了两个stack保存，所以所用的空间就是2倍的元素长度，也就是T(2n)
 所以空间复杂度为:O(n)
 
 

别人的思路
优化了上面的代码，创建了一个front的指针，这样在peek和empty的时候不再需要重复判断有没有复制了

别人的代码
class MyQueue {
    Stack<Integer> stack1;
    Stack<Integer> stack2;
    int front;//用来保存最上层的值
    /** Initialize your data structure here. */
    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(stack1.isEmpty()){//如果没有附过值，那么就设为front
            front = x;
        }
        stack1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
       if(stack2.isEmpty()){//复制到stack2中
           while(!stack1.isEmpty()){
               stack2.push(stack1.pop());
           }
       }
        return stack2.pop();//删除最上层元素
    }
    
    /** Get the front element. */
    public int peek() {
        if(!stack2.isEmpty()){//如果已经复制过了，那么peek就可以
            return stack2.peek();
       }
        return front;//如果没有就不用在复制了，直接返回front
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stack2.isEmpty()&&stack1.isEmpty();//如果有一个不为空那么就不是空了
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */

时间复杂度分析
直接确定了只有pop需要复制所用时间为O(n)
peek和empty都是O(1)

空间复杂度分析
两个stack保存元素，所以空间复杂度为:O(n)
