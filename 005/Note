自己的思路
用两个指针，分别去获取字符串中的子字符串
如果子字符串是回文字符串，那么就判断长度
返回一个最长的子字符串

自己的代码
class Solution {
    public String longestPalindrome(String s) {
        int maxlength = 0;
        String res = "";
        if(s.length() <= 1) return s;
        for(int i = 0; i <= s.length(); i++){//两个指针表示索引
            for(int j = i+1; j <= s.length(); j++){
                if(isValid(s.substring(i,j))){//判断是否为合法的回文子字符串
                    if(j - i + 1 > maxlength){//获取最大的长度返回
                        maxlength = j - i + 1;
                        res = s.substring (i,j);
                    }
                }
            }
        }
        return res;
    }
    
    private boolean isValid(String s){//字符串翻转比较
        String s1 = new StringBuilder(s).reverse().toString();
        if(s1.equals(s)){
            return true;
        }
        return false;
    }
}

时间复杂度分析
遍历了一遍字符串做为子字符串的起点所用的时间为T(n)
随后遍历了起点后的所有字符，所用时间为T(n-i)
然后判断合法性反转也遍历了一遍子字符串，所用的时间为T(j-i)
三个循环嵌套，所以时间复杂度为:O(n^3)

空间复杂度分析
每次检验合法性都会调用一次sb，所以空间复杂度为O(n)



别人的思路
从中间开始向外扩展，遍历字符串，取一个数，开始向两边推进
如果从遍历到的那个字符串向做向右相等，那么指针向外扩一个，直到不等，返回那个字符串的长度以及i的索引
最后取一个最长的长度，从i开始计算出字符串的起始点i - (len - 1)/2和终点 i + len/2

别人的代码
class Solution {
    public String longestPalindrome(String s) {
    if (s == null || s.length() < 1) return "";
    int start = 0, end = 0;//substring的起始点
    for (int i = 0; i < s.length(); i++) {//做为中间的字符向两边扩展
        int len1 = expandAroundCenter(s, i, i);，从本身出发
        int len2 = expandAroundCenter(s, i, i + 1);，从两个出发
        int len = Math.max(len1, len2);//取出最长的字符串
        if (len > end - start) {
            start = i - (len - 1) / 2;//计算起始点
            end = i + len / 2;//计算终点
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;//记录两个指针
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {//如果相等，那么向外扩展
        L--;
        R++;
    }
    return R - L - 1;
}
}

时间复杂度分析
遍历了两遍数组，并且嵌套，所以时间复杂度为:O(n^2)

空间复杂度分析
没有用到额外的空间，所以空间复杂度为:O(1)
