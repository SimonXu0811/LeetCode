自己的思路
环形队列就是为了应对数组的假溢出
队列是先进先出的，在数组的后面加，删除在前面删除
如果删除了前面就有空的位置，但是加到了数组的末端就会报溢出，很浪费空间
所以就用了环形队列，如果末尾指针指到了最后，就重新从0开始
头指针是删除一次才向前移动一次
环形队列能储存的元素是capacity - 1，因为如果放满的话 front和rear指针就会相等，这样就分不清是空还是满了
或者说是定义一个元素的个数，元素满了就是满了
末尾指针的公式就是 (front + 1) % capacity
头指针的公式就是 (rear + 1) % capacity

自己的代码
class MyCircularQueue {
    int elem = 0;
    int[] que ;
    int front = 0;
    int rear = -1;
    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        que = new int[k];//数组的可容纳大小
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(isFull()) {
            return false;
        }
        rear = (rear + 1) % que.length;//公式计算，形成环形
        que[rear] = value;
        elem++;
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(isEmpty()){
            return false;
        }
        front = (front + 1) % que.length;
        elem--;
        return true;
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        return isEmpty() ? -1 : que[front];//如果头尾指针相撞了，就返回-1
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
          return isEmpty() ? -1 : que[rear];
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return elem == 0;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
         return elem == que.length;
    }
}

时间复杂度分析
每个都没有用到循环，所以时间复杂度为:O(1)

空间复杂度分析
没有用到额外的临时储存空间，所以空间复杂度为:O(1)
