自己的思路
将数组递增和递减分开考虑，如果在数组递增的前提下不满足，那么为false，同样的在递减的前提下不满足，也为false
最后只要满足一个就好

时间复杂度分析
遍历的数组两次，一次是以递增为前提，然后遍历数组是否符合，所用时间为:T(n)
一次是以递减为前提，然后遍历数组看是否符合，所用时间为:T(n)
由于不是嵌套的，所以总用时间为:T(n)=T(n)+T(n)
转成高阶无穷小为:O(n)

空间复杂度分析
没有用到额外的数组，所以空间复杂度为:O(1)


别人的思路1
设两个布尔值，一个确定递增一个确定递减，如果非递增那么递增设为false，非递减那么递减设为false
最后一个满足即可

时间复杂度分析
遍历了数组一次判断是递增还是递减，所用时间为:T(n)
转成高阶无穷小就为:O(n)

空间复杂度分析
没有用到额外的储存空间，所以空间复杂度为:O(1)


 别人的思路2
 利用compare函数的性质，如果相等则为0，大于为1，小于为-1。遍历函数，每一次记录一下比较的值，如果不一致，那么就返回false
 
 时间复杂度分析
 就遍历了一次数组，所以所用的时间为T(n)
 转成高阶无穷小为:O(n)
 
 空间复杂度分析
 没有用到额外的数组，所以空间复杂度为O:(1)
