自己的思路
遍历所有的顶点，从顶点出发，找到每行每列，每个对角线的和是否等于15
判断是否为0 或 10 或 5

自己的代码
class Solution {
    public int numMagicSquaresInside(int[][] grid) {
        int R = grid.length;
        int C = grid.length;
        int res = 0;
        
        for(int r = 0; r < R - 2; r++){//遍历所有的顶点
            for(int c = 0; c < C - 2; c++){
                if(Row(grid,r,c)&&
                   Col(grid,r,c)&&
                   Dio(grid,r,c)){//如果每行每列全满足
                    res++;//算合法的一个矩阵
            }
        }
    }
        return res;
}
    
    private boolean Row(int[][] grid, int r, int c){//对行进行判断
        if(grid[r][c] == 5||grid[r][c] == 10||grid[r][c] == 0||
           grid[r+1][c] == 5||grid[r+1][c] == 10||grid[r+1][c] == 0||
           grid[r+2][c] == 5||grid[r+2][c] == 10||grid[r+2][c] == 0) return false;//边界条件就是每个元素不能全为5，不能为10 或0
        
        if(grid[r][c+1]+grid[r][c+2]+grid[r][c]== 15&&
           grid[r+1][c] + grid[r+1][c+1]+grid[r+1][c+2] == 15&&
           grid[r+2][c]+grid[r+2][c+1]+grid[r+2][c+2] == 15){//三行全满足则返回
            return true;
        }
        return false;
    }
    
    private boolean Col(int[][] grid, int r, int c){//对与列进行判断
        if(grid[r][c] == 5||grid[r][c] == 10||grid[r][c] == 0||
           grid[r][c+1] == 5||grid[r][c+1] == 10||grid[r][c+1] == 0||
           grid[r][c+2] == 5||grid[r][c+2] == 10||grid[r][c+2] == 0) return false;//条件一样
        
        if(grid[r][c]+grid[r+1][c]+grid[r+2][c]== 15&&
           grid[r][c+1] + grid[r+1][c+1]+grid[r+2][c+1] == 15&&
           grid[r][c+2]+grid[r+1][c+2]+grid[r+2][c+2] == 15){
            return true;
        }
        return false;
    }
    
     private boolean Dio(int[][] grid, int r, int c){//对角线
        if(grid[r][c] == 5||grid[r][c] == 10||grid[r][c] == 0||
           grid[r][c+2] == 5||grid[r][c+2] == 10||grid[r][c+2] == 0) return false;
        
        if(grid[r][c]+grid[r+1][c+1]+grid[r+2][c+2]== 15&&
           grid[r][c+2]+grid[r+1][c+1]+grid[r+2][c] == 15){
            return true;
        }
        return false;
    }
    
}

时间复杂度分析
遍历了一次举证的每个元素，所用的时间为T(k),其中k为所有元素的值，所以时间复杂度就为:O(n)

空间复杂度分析
只用到了常数级的临时变量，所以空间复杂度为:O(1)








别人的思路
暴力算法，先判断grid[r+1][c+1]是否等于5，然后逐行遍历查看是否等于15，再逐列查看是否等于15,再判断两个对角线是否为15

别人的代码
class Solution {
    public int numMagicSquaresInside(int[][] grid) {
        int R = grid.length, C = grid[0].length;
        int ans = 0;
        for (int r = 0; r < R-2; ++r)
            for (int c = 0; c < C-2; ++c) {
                if (grid[r+1][c+1] != 5) continue;  // 如果不等那就下一个3*3矩阵
                if (magic(grid[r][c], grid[r][c+1], grid[r][c+2],
                          grid[r+1][c], grid[r+1][c+1], grid[r+1][c+2],
                          grid[r+2][c], grid[r+2][c+1], grid[r+2][c+2]))//调用矩阵中每个元素的值
                    ans++;
            }

        return ans;
    }

    public boolean magic(int... vals) {
        int[] count = new int[16];//矩阵内元素只可能从0-15，所以创建长度为16的数组
        for (int v: vals) count[v]++;
        for (int v = 1; v <= 9; ++v)//判断是否9个元素有空元素或者重复元素
            if (count[v] != 1)
                return false;

        return (vals[0] + vals[1] + vals[2] == 15 &&
                vals[3] + vals[4] + vals[5] == 15 &&
                vals[6] + vals[7] + vals[8] == 15 &&
                vals[0] + vals[3] + vals[6] == 15 &&
                vals[1] + vals[4] + vals[7] == 15 &&
                vals[2] + vals[5] + vals[8] == 15 &&
                vals[0] + vals[4] + vals[8] == 15 &&
                vals[2] + vals[4] + vals[6] == 15);//必须全部满足条件每行每列每个对角线都为15
    }
}

时间复杂度分析
遍历了一遍矩阵，所用时间为T(k),其中k为矩阵中所有元素的个数。所以时间复杂度为:O(n)

空间复杂度分析
创建了一个数组，所占用的临时储存空间为:T(16)
转成高阶无穷小:O(1)
