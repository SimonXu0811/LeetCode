思路1
丑数都是通过2，3，5这几个元素相乘的
那么每次都将这个数与2，3，5相乘，然后取一个最小值放在数组里，然后继续向后移动
一直保存n个丑树，最后弹出最后一个元素即可

代码
public class Solution {
    public int nthUglyNumber(int n) {
        int[] ugly = new int[n];//从来保存第n个索引，不能简化，否则1234个元素表达不出来
        ugly[0] = 1;
        int index2 = 0, index3 = 0, index5 = 0;
        int factor2 = 2, factor3 = 3, factor5 = 5;
        for(int i=1;i<n;i++){//count一直加，加到第n个数
            int min = Math.min(Math.min(factor2,factor3),factor5);//然后找到三个元素的最小值
            ugly[i] = min;//将最小值保存在数组里
            if(factor2 == min)//然后对应的乘上那个因子，继续回去找最小值
                factor2 = 2*ugly[++index2];
            if(factor3 == min)
                factor3 = 3*ugly[++index3];
            if(factor5 == min)
                factor5 = 5*ugly[++index5];
        }
        return ugly[n-1];
    }
}

时间复杂度分析
循环的次数取决于n的个数，所以时间复杂度为:O(n)

空间复杂度分析
用了数组，数组的大小取决于n的个数，所以空间复杂度为:O(n)



思路2
用优先队列创建一个堆，然后用count记录弹出的次数
同样的将每个数取最小值，然后放在堆中
然后次数不到就弹出，记录一次值
如果这个数是2的倍数，那么乘2做为下一个元素，找到里面的最小值

代码
public class Solution {
    public int nthUglyNumber(int n) {
        PriorityQueue<Long> heap = new PriorityQueue<>();//创建一个堆
        heap.add(1L); 
        long count = 0, currMin = 0;
        while(count < n){//需要添加的个数
            currMin = heap.poll();//弹出一个做为下一个的因子
            count++;
            if(currMin * 2 > Integer.MAX_VALUE) break;//丑树都是*2 *3 *5的顺序，所以如果*2已经超出了就不用管了
            heap.add(currMin * 2);
            if(currMin % 2 != 0){//如果不是2的倍数，那么就*3
                heap.add(currMin * 3);
                if(currMin % 3 != 0){//如果不是2和3的倍数，那么就*5， 总是保证235235的顺序
                    heap.add(currMin * 5);
                }
            }
        }
        while(count < n){//一直弹出n次
            currMin = heap.poll();
            count++;
        }
        return (int)currMin;
    }    
}

时间复杂度分析
循环中直接判断了是*2还是*3还是*5，省去了比较的时间，所以时间复杂度为:O(logn)

空间复杂度分析
用了优先队列保存，队列的大小取决于n的个数，所以空间复杂度为:O(n)
