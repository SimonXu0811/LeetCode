思路
用两个指针一个来记录字符串，一个来记录出现的次处
遍历字符串，把pre记做第一个字符，向后遍历，如果出现了count+1
如果出现了其他的，那么就把pre设为这个字符，count重置为1
在打印时，只要打印次数和该字符就好

代码
class Solution {
    public static String countAndSay(int n) {
        return helper(n, "1");
    }

    public static String helper(int n, String str) {
        if (n == 1) {//需要递归的次数
            return str;
        }
        StringBuilder sb = new StringBuilder();//创建sb用来修改字符串
        char[] nums = str.toCharArray();//转成数组的形式
        char pre = nums[0];//把pre记做是第一个出现的字符
        int count = 1;//然后次数默认为1
        for (int i = 1; i < nums.length; i++) {//开始遍历字符串
            if (nums[i] == pre) {//如果后面的相等，那么就次数加一
                count++;
            }
            else {//否则先打印出来，然后pre为其他的字符，重置count为1
                sb.append(count);
                sb.append(pre);
                pre = nums[i];
                count = 1;
            }
        }
        // add the occurrence number of the last few numbers to the "str"
        sb.append(count);
        sb.append(pre);
        return helper(n-1, sb.toString());//递归
    }
}

时间复杂度
遍历了一遍字符串，所用的时间为常数级，因为最长也不过1000位，时间为T(1)
递归了n次，最长递归次数也就为30次，所以所用的时间为T(1)
所用的总时间为T(n)=T(1)*T(1)
转成高阶无穷小为:O(1)

空间复杂度
就创建了常数级的临时变量，所以空间复杂度为:O(1)







