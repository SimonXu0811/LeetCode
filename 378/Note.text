自己的思路
将二维数组中的树全部放进优先级队列中，生成最小堆
然后有几个poll k-1个
然后最后再返回最后一个值

自己的代码
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Integer> que = new PriorityQueue<>();//用来生成最小堆
        for(int i = 0; i < matrix.length; i++){//生成一个最小堆
            for(int j = 0; j < matrix[0].length; j++){
                que.add(matrix[i][j]);
            }
        }
        
        int count = 0;
        while(count ++ != k - 1 ) {//然后poll到目标的倒数第二个
        	que.poll();
        }
        
        return que.poll();//然后最后一个poll出来就是答案
    }
}

时间复杂度分析
遍历了一次二维数组，所以时间复杂度为:O(n)

空间复杂度分析
用了优先队列生成堆，所以空间复杂度为:O(n)
