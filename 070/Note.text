思路
动态规划
每单个楼梯走一步，两层楼梯可以走1+1 或者2
所以就有两种选择，要么是走一步，要么走两步，所以要把种类相加

代码
class Solution {
    public int climbStairs(int n) {
       if(n == 1) return 1;
        int[] dp = new int[n + 1];
        dp[1] = 1;//一层的话就是走1步
        dp[2] = 2;//两层就是走2步
        for(int i = 3; i < n + 1; i++){//然后后一个就是记录前面可以走的所有种类
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}

时间复杂度分析
遍历了所有的楼层，所以时间复杂度为:O(n)

空间复杂度分析
用了一个数组记录，所以空间复杂度为:O(n)
