自己的思路
类比于10进制的加法，从最后一位开始加
如果两位相加等于2， 那么把数归零，进位count设为1，
然后每次相加都是a中的数+b中的数+count
如果相加的数等于3， 那么就把数等于1，然后进位count设为1，
其他的数就等于相加数，进位归0
最后把字符串旋转即可

自己的代码
class Solution {
    public String addBinary(String a, String b) {
        StringBuilder sb = new StringBuilder();//sb用来修改字符串
        int count = 0;
        for(int i = a.length() - 1,j = b.length() - 1; count > 0 || i >= 0 || j >= 0; i-- , j--){//所有元素都存在的时候运行
            int temp = 0;
            temp += i < 0? 0 : a.charAt(i) - '0';//如果a字符串中还有数，那么就取字符串的数，否则就为0
            temp += j < 0? 0 : b.charAt(j) - '0';//b同样
            temp += count;temp都是+a+b+count
            
            if(temp == 3){//如果相加等于三，那么原数位为1，count=1
                sb.append(1);
                count = 1;
            }else if(temp == 2){//等于二原数位为0，count=1
                sb.append(0);
                count = 1;
            }else{
                sb.append(temp);//0或者1直接等于temp本身就好
                count = 0;
            }
        }
        return sb.reverse().toString();//旋转即可
    }
}

时间复杂度分析
遍历了字符串，所用的时间就为T(s),s为字符串的总长度，所以时间复杂度为:O(n)

空间复杂度分析
创建了几个临时的变量，变量的个数取决于s的长度，所以空间复杂度为:O(n)




别人的思路
分别遍历两个字符串，如果其中一个遍历结束了，那么就只考虑另一个。
然后两个数相加再加上count 如果超过1，那么结果-2 count+1
然后保存到字符串里，如果没有超过1那么就直接保存。最后旋转字符串就好

别人的代码
class Solution {
    public String addBinary(String a, String b) {
        
        int la=a.length()-1;
        int lb=b.length()-1;
        int count=0;//创建count，用来保存进位
        
        StringBuilder result=new StringBuilder(); //stringbuilder可以修改更新字符串

        while(la>=0 || lb>=0){//必须有一个存在
            int ca=0,cb=0;
            if(la>=0) {
                ca=a.charAt(la)-'0';la--;//a中的数字
            }

            if(lb>=0) {
                cb=b.charAt(lb)-'0';lb--;//b中的数字
            }

            int sum =ca+cb+count;//和进位一起加起来
            if(sum>=2){//如果总和大于等于2，那么就-2 count=1
                result.append(sum-2);
                count=1;
            }else{//否则直接保存，count=2
                result.append(sum);
                count=0;
            }
        }

        if(count==1) {//如果遍历完还有进位，就直接加进去
            result.append(carryIn);
        }
        return result.reverse().toString();//旋转 转成字符串
    }
}

时间复杂度分析
由于就遍历完了所有的字符串长度，所以所用的时间为T(s),其中s是字符串的总长度。
转成高阶无穷小为:O(n)

空间复杂度分析
用到的额外空间就是每一次加起来创建的变量，总共的次数为s次，取决于字符串的长度
转成高阶无穷小就为:O(n)

















