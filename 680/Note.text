自己的思路
先将字符串转换成StringBuilder，然后翻转，查看是否本身就是回文字符串，
然后遍历字符串，尝试每一种删除一个元素的情况，然后判断是否是回文数，如果是那么就返回true

自己的代码
class Solution {
    public boolean validPalindrome(String s) {
        StringBuilder sb = new StringBuilder(s);//首先判断字符串本身是不是回文字符串
        if(s.equals(sb.reverse().toString())) return true;
        else{
            for(int i = 0; i < s.length(); i++){//遍历字符串，尝试每一种删除一个元素的可能性
                String s1 = s.substring(0,i)+s.substring(i+1,s.length());
                StringBuilder sb1 = new StringBuilder(s1);
                if(s1.equals(sb1.reverse().toString())) return true;//判断是否是回文字符串
            }
        }
        return false;
    }
}

时间复杂度分析
循环了一次，删除每个字符，所用时间为T(n)
然后旋转遍历又使用了T(n)
所以所用的总时间为T(n^2)
转成高阶无穷小就为:O(n^2)

空间复杂度分析
每一次对比都接用了StringBuilder用来保存s个字符，s取决于字符串的长度
所以空间复杂度为:O(n)



别人的思路
直接利用两个指针，一个从头向尾移动，一个从尾向前移动
如果两个相等，那么下一个
如果不相等，那么删除一个当前的，头向尾移动一个，或者尾向前移动一个，判断是否同，因为只能删一个

别人的代码
class Solution {
    public boolean isPalindromeRange(String s, int i, int j) {
        for (int k = i; k <= i + (j - i) / 2; k++) {//继续遍历，查看是否相同
            if (s.charAt(k) != s.charAt(j - k + i)) return false;
        }
        return true;
    }
    public boolean validPalindrome(String s) {
        for (int i = 0; i < s.length() / 2; i++) {//遍历一遍就行，因为如果是回文字符串，后一半一定和前一半相同
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {//如果头尾两个不相同，那么删除一个头或一个尾，判断删除后是否相同
                int j = s.length() - 1 - i;
                return (isPalindromeRange(s, i+1, j) ||
                        isPalindromeRange(s, i, j-1));//判断删除后头尾的是否相同
            }
        }
        return true;
    }
}

时间复杂度分析
遍历了两次，一次是遍历到第一个不同的，所用时间为T(m)
第二次在第一次遍历的基础上继续遍历，所用的时间为T(s-m)
所以两次总共遍历了整个字符串，所用总时间就是T(s)
转成高阶无穷小就为:O(n)

空间复杂的分析
没有用到额外的空间，所以空间复杂度为:O(1)
