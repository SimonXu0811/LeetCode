
个人最开始的思路就是将数组进行排序，然后以两个两个为一组遍历，如果一组中有一个不符合，那么肯定就是第一个，因为数组的个数就是奇数。遍历到最后都是合法的
那么最后一个数肯定就是单次出现的了
举个例子{1,1,2,3,3,4,4}以及{1,2,2,3,3,4,4}以及{1,1,2,2,3,4,4}

当我调用Arrays.sort(nums) 的时候，就会调用内置的归并排序，那么这时候时间的复杂度就T(nlgn)，再接着循环遍历一次时间复杂度就到了T(nlgn+n)
也就是总体时间复杂度就为O(nlgn)
因为归并排序需要额外的空间，所以空间复杂度也就会高，到线性的O(N)


这个算法可行，但是不好，因为时间和空间的复杂度都太高了，所以应该改用异或法。
异或法的精髓就在于，如果有相同的数，那么两个数异或肯定能归为0000，比如1001与1001，异或之后就是0000
那么再遍历完数组之后，相同的数归零不同的数保留，最后的结果肯定就会是所要的答案。

下面分析时空复杂度，数组遍历了一遍由0-nums.length-1,时间复杂度就为O(n)
运行过程中也没有额外的空间，所以空间复杂度就为常数级O(1)
