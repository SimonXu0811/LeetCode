自己的思路
创建一个ListNode用来保存起始点，然后再创建一个临时的链表用来比较添加
然后开始归并算法，两两比较
如果l1.val小的话就插入这个，如果l1结束了，那么就把l2全放后面去

自己的代码
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);//创建一个头用来保存l1和l2的起始点
        ListNode cur = head;//cur用来插入一直到最后，如果不用这个，那么head最后只会指在最后一个值
        while(l1 != null && l2 != null){//两个链表都不为空时
            if(l1.val <= l2.val){//那个小插入哪个
                cur.next = l1;
                l1 = l1.next;
            }else{
                cur.next = l2;
                l2 = l2.next;
            }
            cur = cur.next;
        }
        if(l1 != null){//如果一个链表为空时，另一个直接放后面去
             cur.next = l1;
        }
        else if(l2 != null){
            cur.next = l2;
        }
        return head.next;
    }
}

时间复杂度分析
总共遍历了l1和l2两个链表的最小长度，所以所用的时间为:O(n)

空间复杂度分析
归并用到了一个新的储存空间，所以空间复杂度为:O(m+n)



别人的思路
用递归算法，如果有一个为空就返回另一个
哪个小就在哪个后面插入，然后下一次递归

别人的代码
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2){
		if(l1 == null) return l2;//如果为空或者遍历结束了，那么就返回l2
		if(l2 == null) return l1;
		if(l1.val < l2.val){//哪个小就保留哪个
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else{
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
}
}

时间复杂度分析
总共递归的次数就是l1和l2的最小长度，所以时间复杂度为:O(n)

空间复杂度分析
原地算法，没有用到临时的储存空间，所以空间复杂度为:O(1)
