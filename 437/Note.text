思路
分治思想，n数之和都是转成n-1数之和，再细分
分开迭代，首先以根节点为一个值开始向下迭代，所有有一个满足条件，那么就+1
然后以左子树为一个值，开始向下迭代，如有满足就+1
然后以右子树为一个值，开始向下迭代，如有满足就+1

代码
public class Solution {
    public int pathSum(TreeNode root, int sum) {
        if (root == null) return 0;
        return pathSumIndex(root, sum) //根节点为一个值，两边开始向下迭代找是否有满足的
               + pathSum(root.left, sum) //左子树开始找路径
               + pathSum(root.right, sum);//右子树开始找路径
    }
    
    private int pathSumIndex(TreeNode node, int sum) {
        if (node == null) return 0;
        return (node.val == sum ? 1 : 0) //如果找到了，那么就+1
            + pathSumIndex(node.left, sum - node.val) //从节点开始深度遍历找路径
            + pathSumIndex(node.right, sum - node.val);
    }
}

时间复杂度分析
遍历了两次整棵树，第一次遍历就是找到一个节点，后面一次就是从该节点出发，然后向后遍历到底，所以时间复杂度为:O(n^2)

空间复杂度分析
没有用到额外的空间，所以空间复杂度为:O(1)
