自己的思路
首先先将中间的横线全部替换掉
然后从后向前遍历，每一次都是k个长度之后插入一个横线
最后第一个的长度肯定就是大于零小于等于k的 

自己的代码
public String licenseKeyFormatting(String S, int K) {
    
    S = S.replaceAll("\\-", "");//删掉掉所有的横线
    S = S.toUpperCase();//在转换之后的字母都要为大写

    StringBuilder sb = new StringBuilder();//创建sb用来修改字符串
    sb.append(S);

    int i=sb.length()-K;//从后向前遍历，每次截取k个长度
    while(i>0) {
        sb.insert(i, '-');//把横线插进字符串
        i -= K;
    }

    return sb.toString();
}

时间复杂度分析
首先替换遍历了整个字符串，所用的时间为T(n)
然后再全转换成大写所用时间为T(n)
再遍历整个字符串，所用的次数为S/k,所哟所用的时间为T(S/k)
最后插入所用时间为T(1)
所以所用的总时间为T(n)=T(n)+T(n)+T(s/k)*T(1)
转成高阶无穷小为:O(n)

空间复杂度分析
用到了sb做为临时的储存空间，所以借用了s个临时空间，空间复杂度为:O(n)
