自己的思路
总共有三点要求
1. 忽略大小写。那么将字符串全转成大写或者小写
2. 只能有单词或者数字。那么比较的时候就只能留下字母或数组
3. 这个字符是回文数。那么就是旋转过来还要相等
所以就是先统一大小写，然后创建一个StringBuilder，用来添加字符，准备旋转
然后在添加时确定是否为字母或是数字
最后旋转用equals表示

自己的代码
class Solution {
    public boolean isPalindrome(String s) {
        s = s.toLowerCase();//统一成小写字符串
        StringBuilder sb = new StringBuilder();//sb用来旋转操作
        for(int i = 0; i < s.length(); i++){
            if(Character.isLetterOrDigit(s.charAt(i))){//判断是否是字母或数字，也可以用isVaildChar
                sb.append(s.charAt(i));//添加
            }
        }
        String s1 = sb.toString();//转回字符串比较
        String s2 = sb.reverse().toString();//旋转之后比较
        return s1.equals(s2);//判断是否相等
    }
}

时间复杂度分析
用到循环的地方就是将字符串添加到sb中，所以所用的时间取决于字符串的长度s
所以时间复杂度就为:O(n)

空间复杂度分析
创建了一个sb长度为s用来比较，所以空间复杂度就为:O(n)


别人的思路
用双指针法，一个从左边开始，一个从右边开始，逐一判断char是否相同
如果不是合法的字母或数字，那么就下一个，如果两个不等，那么就返回false

别人的代码
class Solution {
    public boolean isPalindrome(String s) {
        int l = 0, r = s.length() - 1;//左右双指针
        while(l < r){
            if(!Character.isLetterOrDigit(s.charAt(l))){//如果不合法，那么向右移动
                l++;
                continue;
            }else if(!Character.isLetterOrDigit(s.charAt(r))){//如果不合法，那么向左移动
                r--;
                continue;
            }
            if(Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r))){//如果不等，那么久返回false
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}

时间复杂度分析
两个指针总共遍历了一次字符串长度，所以时间复杂度为:O(n)

空间复杂度分析
没有用到额外的储存空间，就用到了两个双指针变量，所以空间复杂度为:O(1)
