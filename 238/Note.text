思路
首先将数组错位，让后一位等于前面的所有数相乘，然后第一位设为1
然后再从后向前乘上原来的每一位，最后一位乘的1，这样就形成了每一位的错位相乘
比如 6，2，3，4，5
先错位，后一位等于前面的所有数相乘，然后第一位设为1
那么就形成了1，6，12，36，144 
可以看见最后一位已经是一个答案了
所以最后一位只要乘1，然后其余的都乘上自己的原数组后一位
最后就形成144，180，240，360，120 

代码
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int[] result = new int[nums.length];
    for (int i = 0, tmp = 1; i < nums.length; i++) {//先错位，后面的等于前面的所有数之积
        result[i] = tmp;
        tmp *= nums[i];
    }
    for (int i = nums.length - 1, tmp = 1; i >= 0; i--) {//然后在乘上原数组的前一位
        result[i] *= tmp;
        tmp *= nums[i];
    }
    return result;
}
}

时间复杂度分析
循环了两次，所以时间复杂度为:O(n)

空间复杂度分析
原地算法，所以空间复杂度为:O(1)
