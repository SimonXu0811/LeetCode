自己的思路1
用递归的方式
先遍历所有的子树，然后最后加上父节点

自己的代码
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    List<Integer> list = new ArrayList<>();
    public List<Integer> postorder(Node root) {
        if(root == null){//空树
            return list;
        }
        
        for(Node node : root.children){//先遍历所有的子树
            postorder(node);
        }
        
        list.add(root.val);//然后加上父节点
        return list;
    }
}

时间复杂度分析
遍历了所有的元素，所以时间复杂度为:O(n)

空间复杂度分析
递归临时保存了上层的形式，所以空间复杂度为:O(n)



自己的思路2
用迭代的方式
创建一个stack，后进先出的原则无法做到后序，所以考虑旋转数组，先将list以前序的形式添加
唯一不同的是子树的顺序需要逆序的保存进数组，然后旋转数组的时候才会变成顺序的
最后旋转

自己的代码
class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) return list;
        
        Stack<Node> stack = new Stack<>();
        stack.add(root);
        
        while(!stack.isEmpty()) {//模拟前序
            root = stack.pop();
            list.add(root.val);
            for(Node node: root.children)//顺序push进stack，那么pop的时候就是逆序的加进数组
                stack.add(node);
        }
        Collections.reverse(list);//翻转
        return list;
    }
}

时间复杂度分析
遍历了所有的元素，最后反转又遍历了一遍，所以时间复杂度为:O(n)

空间复杂度分析
stack保存了临时的数据，所以空间复杂度为:O(n)
