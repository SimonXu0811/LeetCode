思路
动态规划，每次都多留出一个空间用来保存所有的合集
然后从后向前遍历，将最后一个设为是1次，然后看前一位，如果是0，那么就够不成两位数，所以记为0
如果不是，那么就是可以构成的，所以记为1
然后开始遍历，如果是1位数，那么就在后面的基础上加1，如果能构成两位数，那么就原来基础上加
忽略26的限制
比如1 那么就是1
然后21 那么就是1
然后321 3这个位置记录的是之前两个和，所以就是1+1
然后4321 记录321的总和，那么就是2+1

代码
public class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) return 0;//如果没有数
        
        int[] dp = new int[n+1];//多一个位置出来记录总和
        dp[n]  = 1;//从最后一位算起，如果是前面是0，那么就只能构成一位，如果不是，那么就赋1
        dp[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
        
        for (int i = n - 2; i >= 0; i--)//每个都是记录之前的种类和，然后一直到第一个就是记录总和
            if (s.charAt(i) == '0') continue;
            else dp[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? dp[i+1]+dp[i+2] : dp[i+1];
        
        return dp[0];
    }
}

时间复杂度分析
遍历了一遍数组，所以时间复杂度为:O(n)

空间复杂度分析
多创建了一个数组，所以空间复杂度为:O(n)
