自己的思路
用内置函数sort做

自己的代码
class Solution {
    public void sortColors(int[] nums) {
        Arrays.sort(nums);
    }
}

时间复杂度分析
归并算法，时间复杂度为:O(nlogn)

空间复杂度分析
没有用到额外的空间，所以空间复杂度为:O(1)



别人的思路
三指针法，一个index用来遍历数组，一个记录头，一个记录尾
如果遍历到0，那么放到头去，然后index + 1
如果遍历到2，那么放到尾去，然后index留在原地继续判断
1肯定就是剩下的在中间

别人的代码
class Solution {
    public void sortColors(int[] nums) {
        int start = 0, end = nums.length - 1, index = 0;//三个指针
        while(index <= end){//遍历整个数组
            if(nums[index] == 0){//如果是0，那么换到头去，头指针向后移一个
                nums[index] = nums[start];
                nums[start++] = 0;
            }
            else if(nums[index] == 2){//如果是2，那么换到尾去，尾指针减1，并且index不变动继续判断
                nums[index] = nums[end];
                nums[end--] = 2;
                continue;
            }
            index ++;//1就不变向后移动
        }
    }
}

时间复杂度分析
遍历了一次数组，所以时间复杂度为:O(n)

空间复杂度分析
没有用到临时数组，所以空间复杂度为:O(1)
