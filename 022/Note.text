自己的思路
首先判断左右括号的个数,结束的条件就是开闭括号都用完了
然后左右括号分别递归
条件必须是左括号要大于又括号数，不然括号就不成立了
然后回溯

自己的代码
class Solution {
    List<String> list = new ArrayList<>();
    public List<String> generateParenthesis(int n) {
        backtrace(0,0,n,"");
        return list;
    }
    
    private void backtrace( int left, int right, int n, String s){
        if(left == n && right == n){//两个括号都用完了，那么就结束
            list.add(s);
        }
        
        if(left < n){//如果左括号有，就加左括号
            backtrace(left + 1,right,n,s + "(");
        }//判断结束回溯上一层
        if(right < n && left > right){//右括号有并且右括号小于左括号个数，就加右括号
            backtrace(left,right + 1,n,s + ")");
        }//判断结束回溯上一层
 
    }
}

时间复杂度分析
加一个少一个，每次回溯就是n-1，所以时间复杂度为:O(n!)

空间复杂度分析
每次保存了回溯的空间，所以空间复杂度为:O(n)
