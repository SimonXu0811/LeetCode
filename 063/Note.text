自己的思路
动态规划，首先判断上层和左侧，如果不是1，那么就这个可通过数等于前一个
如果是1那么就是不通，从这个开始的后面都是0
然后判断中间，中间能通过的通过数就等于上层的加上左侧的总和
然后一直到结束

自己的代码
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        if(obstacleGrid[0][0] == 1) return 0;//如果开头就是1全都不通
        int[][] dp = new int [row][col];
        dp[0][0] = 1;
        
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j++){
                if(i == 0 && j == 0) continue;
                if(i == 0){//最上层的情况
                    if(obstacleGrid[i][j] == 1) dp[i][j] = 0;//如果是1那么就全部不通
                    else dp[i][j] += dp[i][j - 1];//否则就是前一个能通过的步数
                }
                else if(j == 0){//最左侧的情况
                    if(obstacleGrid[i][j] == 1) dp[i][j] = 0;//检验是不是1
                    else dp[i][j] += dp[i - 1][j];//复制过去
                }
                else{//中间的情况
                    if(obstacleGrid[i][j] == 1) dp[i][j] = 0;//是1就不通
                    else dp[i][j] = dp[i - 1][j] + dp[i][j - 1];//不是就是上面和左边的步数总和
                }
            }
        }
        return dp[row - 1][col - 1];//最后得到结果
    }
}

时间复杂度分析
遍历了一遍矩阵，所以时间复杂度为:O(n)

空间复杂度分析
创建了一个新的矩阵表示，所以空间复杂度为:O(n)



自己的思路2
上面的基础上改成原地算法

自己的代码
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        if(obstacleGrid[0][0] == 1) return 0;
        obstacleGrid[0][0] = 1;
        
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j++){
                if(i == 0 && j == 0) continue;
                if(i == 0){//最上层的情况
                    if(obstacleGrid[i][j] == 1) obstacleGrid[i][j] = 0;//如果是1那么就全部不通
                    else obstacleGrid[i][j] += obstacleGrid[i][j - 1];//否则就是前一个能通过的步数
                }
                else if(j == 0){//最左侧的情况
                    if(obstacleGrid[i][j] == 1) obstacleGrid[i][j] = 0;//检验是不是1
                    else obstacleGrid[i][j] += obstacleGrid[i - 1][j];//复制过去
                }
                else{//中间的情况
                    if(obstacleGrid[i][j] == 1) obstacleGrid[i][j] = 0;//是1就不通
                    else obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];//不是就是上面和左边的步数总和
                }
            }
        }
        return obstacleGrid[row - 1][col - 1];
    }
}

时间复杂度分析
遍历了所有的矩阵元素，所以时间复杂度为:O(n)

空间复杂度分析
原地算法，所以时间复杂度为:O(1)
