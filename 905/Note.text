自己的思路
先创建一个数组，开始遍历一次原数组，如果是偶数那就加进临时的数组中
再遍历一次数组，如果是奇数就接着加到后面去

时间复杂度分析
第一次遍历数组所用时间为T(n)
第二次遍历数组所用时间为T(n)
所用的总时间为T(n)=T(n)+T(n)
转成高阶无穷小为:O(n)

空间复杂度分析
创建了临时的数组，用来储存整理过后的数，所以空间复杂度为:O(n)



别人的思路
用双指针
两个指针不能重合
当前指针为奇数，后指针为偶数时交换
否则前指针为偶数时，继续向后移动，后指针为奇数时，继续向前移动

时间复杂度分析
两个指针和起来遍历了一次数组，所以时间复杂度为:O(n)

空间复杂度分析
原地算法，没有用到临时空间，就交换的时候借助了，空间也为常数空间，所以空间复杂度为
