自己的思路
双指针法，一个指针指向头，一个指针指向尾，然后向中间移动
两个指针两两交换

自己的代码
class Solution {
    public void reverseString(char[] s) {
        int i = 0; //头指针
        int j = s.length - 1;//尾指针
        while(i < j){//交换
            char temp = s[i];
            s[i] = s[j];
            s[j] = temp;
            i++;
            j--;
        }
    }
}

时间复杂度分析
两个指针向中间移动，最后见遍历了一整个数组，所以所用的时间为T(n)
转成高阶无穷小为:O(n)

空间复杂度分析
每次交换都用了一个临时遍历，一共调用了n/2次
所以空间复杂度就为:O(n)




