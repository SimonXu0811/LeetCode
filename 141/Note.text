自己的思路
用hashset，由于是循环的，那么必定会出现一次，如果出现了就返回true
如果不循环，那么必定有个终点null，一旦有就是false
不保存val而保存node是因为val可能重复，但是node带有next不会重复

自己的代码
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> node = new HashSet<>();//hashset保存节点
        while(head != null){//一直遍历到结束
            if(node.contains(head)){//如果有就是循环再出现了，那么就肯定是循环的
                return true;
            }else{
                node.add(head);//没有就加进set中
            }
            head = head.next;//遍历
        }
        return false;//如果有结尾，那么肯定不是循环的
    }
}

时间复杂度分析
就遍历了一遍的长度，所以时间复杂度为:O(n)

空间复杂度分析
借用了hashset保存，必定需要l个临时位置，l为链表长度，所以空间复杂度为:O(n)



别人的思路
用快慢两个指针，快指针两两遍历，慢指针一个一个遍历
如果有快指针到底了为null那么肯定不是循环的
如果是循环的，那么快指针一定会追上慢指针

别人的代码
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
    if (head == null || head.next == null) {
        return false;
    }//临界条件
    ListNode slow = head;
    ListNode fast = head.next;
    while (slow != fast) {
        if (fast == null || fast.next == null) {//fast只要遍历到了null，那么就是非循环的
            return false;
        }
        slow = slow.next;//慢指针速度为1
        fast = fast.next.next;//快指针速度为2
    }
    return true;//如果追上了那么肯定就是循环的
}
}

时间复杂度分析
一个数学问题fast遍历了nl+k的长度，slow遍历了k个长度，k的取值就是（nl+k）/2 = k/1
所以所用的时间是线性的，所以时间复杂度为:O(n)

空间复杂度分析
没有用到其他的储存方式，常数级的两个指针，所以空间复杂度为:O(1)
