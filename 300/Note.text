思路
定义状态：LIS(i) 表示以第 i 个数字为结尾的最长上升子序列的长度。
即在 [0, ..., i] 的范围内，选择以数字 nums[i] 结尾可以获得的最长上升子序列的长度。
关键字是：以第 i 个数字为结尾，即我们要求 nums[i] 必须被选取。
反正一个子序列一定要以一个数字结尾，那我就将状态这么定义，这一点是重要且常见的。

状态转移方程：遍历到索引是 i 的数的时候，我们应该把索引是 [0, ... ,i - 1] 的 LIS 都看一遍，
如果当前的数 nums[i] 大于之前的某个数，那么 nums[i] 就可以接在这个数后面形成一个更长的 LIS 。
把前面的 i 个数都看了， LIS[i] 就是它们的最大值加1。即比当前数要小的那些里头，找最大的，然后加1 。

状态转移方程即：LIS(i) = max( 1 + LIS(j) if j < i and nums[i] > nums[j])

代码
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int dp[]=new int[n];
        int res=0;
        for(int i=0;i<n;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]){ // 看以前的，比它小的，说明可以接在后面形成一个更长的子序列
                    dp[i]=Math.max(dp[i],dp[j]+1);
                }
            }
            res=Math.max(res,dp[i]);找到最长的
        }
        return res;
    }
}

时间复杂度分析
遍历了两遍数组，所以时间复杂度为:O(n^2)

空间复杂度分析
借用了额外的数组，所以空间复杂度为:O(n)
