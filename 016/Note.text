自己的思路
将所有的三位数和与目标值比较，如果差距比较小的话就保存这个三位数的和
然后最后取到一个最小的差距距离，返回这个三位数和

自己的代码
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int abs = Integer.MAX_VALUE; //获取最小距离
        int sum = 0;//三位数和
        int sub = 0;//与目标之间的距离
        int res = 0;//距离最小的三位数和
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j < nums.length; j++){
                for(int k = j + 1; k < nums.length; k++){
                    sum = nums[i] + nums[j] + nums[k];
                    sub = Math.abs(target - sum);
                    if(sub < abs){//取出最小距离和对应的三位数和
                        abs = sub;
                        res = sum;
                    }
                }
            }
        }
        return res;
    }
}

时间复杂度分析
三个循环嵌套，所以时间复杂度为:O(n^3)

空间复杂度分析
常数级的额外空间，所以空间复杂度为:O(1)



别人的思路
用三个指针，前一个遍历，最后两个个用来比较
首先先整理数组
然后找到那一个加着一个数之后与目标值为相差为负，加上后一个数与目标值相差为正
然后比较这两个距离找到距离相对较小的一个就是答案

别人的代码
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        int result = num[0] + num[1] + num[num.length - 1];
        Arrays.sort(num);//先整理数组
        for (int i = 0; i < num.length - 2; i++) {
            int start = i + 1, end = num.length - 1;
            while (start < end) {
                int sum = num[i] + num[start] + num[end];
                if (sum > target) {//如果差值大于零就缩小，直到最后一个大的
                    end--;
                } else {//小于零就扩大直到最后一个
                    start++;
                }
                if (Math.abs(sum - target) < Math.abs(result - target)) {//比较哪个距离更小
                    result = sum;
                }
            }
        }
        return result;
    }
}

时间复杂度分析
两个循环嵌套，所以时间复杂度为:O(n^2)

空间复杂度分析
没有用到额外的空间，所以空间复杂度为:O(1)
