自己的思路
遍历整个数组，如果元素等于1，那么长度加一
如果元素等于0，那么长度取最大值，长度归零重新开始
最后遍历完再取最大值

自己的代码
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = 0;
        int max = 0;
        for(int i : nums){//遍历数组
            if(i == 1){//等于1那就长度加一
                count ++;
            }
            if(i == 0){//等于0那么取出最大值，长度归零
                max = Math.max(max, count);
                count = 0;
            }
        }
      
        return Math.max(max,count);  //如果最后一个不为零，那么再取一次最大值
    }
}

时间复杂度分析
就遍历了一次数组，所以时间复杂度为:O(n)

空间复杂度
没有用到额外的空间，那么空间复杂度为:O(1)
